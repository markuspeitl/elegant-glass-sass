@use 'sass:list';
@use 'sass:math';

@mixin between-children(){

    & > *:not(:last-child) {
        @content();
    }
}

@mixin gap-between-children($spacing: 0.1rem, $orientation: horizontal){

    @if ($orientation == horizontal or $orientation == h){
        @include between-children() {
            margin-right: $spacing;
        }
    }
    @if ($orientation == vertical or $orientation == v){
        @include between-children() {
            margin-bottom: $spacing;
        }
    }
}

@mixin pad-between-children($spacing: 0.1rem, $orientation: horizontal){
    
    & > * {
        padding-left: $spacing;
        padding-right: $spacing;
    }

    /*@include between-children($orientation){
        padding-left: $spacing;
        padding-right: $spacing;
    }*/
}

@mixin border-between-children($border: 0.125em solid white, $orientation: horizontal){

    @if ($orientation == horizontal or $orientation == h){
        @include between-children() {
            border-right: $border;
        }
    }
    @if ($orientation == vertical or $orientation == v){
        @include between-children() {
            border-top: $border;
        }
    }

    /*& > *:not(:last-child) {
        @if ($orientation == horizontal or $orientation == h){
            border-right: $border;
        }
        @if ($orientation == vertical or $orientation == v){
            border-right: $border;
        }
    }*/
}

@mixin screen-layout-break($width-break: $default-screen-break){
    @media only screen and (max-width: $width-break) {
        @content;
    }
}

//$offset-ratio-percent == fine adjustment from common break points
@mixin aspect-break($aspect-ratio: list.slash(4, 3), $offset-ratio-percent: 0){

    $aspect-x: list.nth($aspect-ratio, 1);
    $aspect-y: list.nth($aspect-ratio, 2);
    //$new-aspect: list.slash(calc($aspect-x + $offset-screen-percent), 3);

    $aspect-ratio-float: calc($aspect-x / $aspect-y);
    $aspect-ratio-float: calc($aspect-ratio-float * (1 + $offset-ratio-percent / 100));
    
    @media only screen and (max-aspect-ratio: $aspect-ratio-float) {
        @content;
    }
}


@mixin set-color-pair($color-pair: white black){
    background-color: list.nth($color-pair, 1);
    color: list.nth($color-pair, 2);
}

@mixin spaceless-border($border-side: bottom, $border-thickness: 1px, $border-color: white, $current-margin-bottom: 0px, $border-style: solid){
    
    @if($current-margin-bottom == null){
        $current-margin-bottom: 0px;
    }

    @if($border-side == null){
        border: $border-thickness $border-style $border-color;
        margin-bottom: calc($current-margin-bottom - 2 * $border-thickness);
    }
    @else {
        border-#{$border-side}: $border-thickness $border-style $border-color;
        margin-bottom: calc($current-margin-bottom - $border-thickness);
    }
}

@mixin reset-spaceless-border($border-side: bottom, $orig-margin-bottom: 0px){
    @if($orig-margin-bottom == null){
        $orig-margin-bottom: 0px;
    }

    @if($border-side == null){
        border: none;
        margin-bottom: $orig-margin-bottom;
    }
    @else {
        border-#{$border-side}: none;
        margin-bottom: $orig-margin-bottom;
    }
}